// User CRUD Endpoints

// Create a new user (POST request)
app.post('/users', async (req, res) => {
  const { name, email, role } = req.body;

  // Validation checks for required fields and email format
  if (!name || !email || !role) {
    return res.status(400).json({ message: 'Missing required fields' });
  }

  // Check if email already exists
  const existingUser = await User.findOne({ email });
  if (existingUser) {
    return res.status(400).json({ message: 'Email already exists' });
  }

  // Create a new user instance
  const newUser = new User({ name, email, role });

  // Save the new user to the database
  await newUser.save();

  // Send success response with the newly created user's data
  res.status(201).json(newUser);
});

// Get user by ID (GET request)
app.get('/users/:id', async (req, res) => {
  const userId = req.params.id;

  // Find the user with the provided ID
  const user = await User.findById(userId);

  if (!user) {
    return res.status(404).json({ message: 'User not found' });
  }

  // Send success response with user's data
  res.status(200).json(user);
});

// Update user by ID (PUT request)
app.put('/users/:id', async (req, res) => {
  const userId = req.params.id;
  const { name, email, role } = req.body;

  // Find the user with the provided ID
  const user = await User.findByIdAndUpdate(userId, { name, email, role });

  if (!user) {
    return res.status(404).json({ message: 'User not found' });
  }

  // Send success response with updated user's data
  res.status(200).json(user);
});

// Delete user by ID (DELETE request)
app.delete('/users/:id', async (req, res) => {
  const userId = req.params.id;

  // Delete the user with the provided ID
  await User.findByIdAndDelete(userId);

  // Send success response
  res.status(200).json({ message: 'User deleted successfully' });
});

// Login Endpoint

app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  // Find the user with the provided email
  const user = await User.findOne({ email });

  if (!user) {
    return res.status(401).json({ message: 'Invalid email or password' });
  }

  // Validate the provided password

  
const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid) {
    return res.status(401).json({
 
message: 'Invalid email or password' });
  }

  // Generate a JWT access token
  const accessToken = generateAccessToken(user._id);

  // Send success response with the access token
  res.status(200).json({ token: accessToken });
});